
name: CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the specified branches
  push:
  pull_request:
    branches: [ template-dev, template-prod, dev-iframer, dev-world-map-backend, dev-country-info-backend, dev-capitals-backend, prod-iframer, prod-world-map-backend, prod-country-info-backend, prod-capitals-backend ]

env:
  BRANCH: ${{ github.ref_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # Using job outputs, set an env var that holds the name of the team folder
  # we should use in a later job
  set-vars:
    name: Set env vars
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.TEAM_DIR }}
    steps:
      - id: step1
        shell: bash
        run: |
          if [[ ${{ env.BRANCH }} == 'dev-iframer' ]] || [[ env.BRANCH == 'prod-iframer' ]]
          then
            echo "::set-output name=TEAM_DIR::iframer"
          elif [[ ${{ env.BRANCH }} == 'dev-world-map-backend' ]] || [[ env.BRANCH == 'prod-world-map-backend' ]]
          then
            echo "::set-output name=TEAM_DIR::world-map-backend"
          elif [[ ${{ env.BRANCH }} == 'dev-world-map-db' ]] || [[ env.BRANCH == 'prod-world-map-db' ]]
          then
            echo "::set-output name=TEAM_DIR::world-map-db"
          elif [[ ${{ env.BRANCH }} == 'dev-country-info-backend' ]] || [[ env.BRANCH == 'prod-country-info-backend' ]]
          then
            echo "::set-output name=TEAM_DIR::country-info-backend"
          elif [[ ${{ env.BRANCH }} == 'dev-country-info-db' ]] || [[ env.BRANCH == 'prod-country-info-db' ]]
          then
            echo "::set-output name=TEAM_DIR::country-info-db"
          elif [[ ${{ env.BRANCH }} == 'dev-capitals-backend' ]] || [[ env.BRANCH == 'prod-capitals-backend' ]]
          then
            echo "::set-output name=TEAM_DIR::capitals-backend"
          elif [[ ${{ env.BRANCH }} == 'dev-capitals-db' ]] || [[ env.BRANCH == 'prod-capitals-db' ]]
          then
            echo "::set-output name=TEAM_DIR::capitals-db"
          fi

  test-unit:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Info message
        run: echo "WARNING! This job has no tests yet."

  test-rest:
    name: Run REST API tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Info message
        run: echo "WARNING! This job has no tests yet."

  test-bdd:
    name: Run BDD tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Info message
        run: echo "WARNING! This job has no tests yet."

  # This job is using actions from Docker
  build-and-push-dev:
    name: Build and push dev image to Docker Hub
    needs: [ set-vars, test-unit, test-rest, test-bdd ]
    # Check if we are on one of the main dev branches
    if: |
      github.ref == 'refs/heads/dev-iframer' ||
      github.ref == 'refs/heads/dev-world-map-backend' ||
      github.ref == 'refs/heads/dev-country-info-backend' ||
      github.ref == 'refs/heads/dev-country-info-db' ||
      github.ref == 'refs/heads/dev-capitals-backend' ||
      github.ref == 'refs/heads/dev-capitals-db'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        env:
          DOCKER_IMAGE_FULL_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/devops21-metodik2-${{ env.BRANCH }}:latest
        uses: docker/build-push-action@v2
        with:
          # Here we're setting the context for the build to the var we created in set-vars job
          context: ${{ needs.set-vars.outputs.output1 }}
          push: true
          # Set the repo, name and tag of the docker image that we're pushing to Docker Hub
          # tags: ${{ secrets.DOCKER_HUB_USERNAME }}/devops21-metodik2-${{ env.BRANCH }}:latest
          tags: ${{ env.DOCKER_IMAGE_FULL_NAME }}

  pull-and-deploy-dev:
    # Generate SSH conf, connect to the deployment server, pull and deploy the image
    name: Pull and deploy dev image to server
    needs: [ build-and-push-dev ]
    runs-on: ubuntu-latest
    env:
      DEV_SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
    steps:
      - name: Check if development server is defined
        if: env.DEV_SSH_HOST == ''
        run: |
          echo "DEV_SSH_HOST is undefined, bailing out!"
          exit 1
      - name: Setup SSH
        env:
          DEV_SSH_USER: ${{ secrets.DEV_SSH_USER }}
          DEV_SSH_PORT: ${{ secrets.DEV_SSH_PORT }}
          DEV_SSH_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "${{ env.DEV_SSH_KEY }}" > ~/.ssh/dev.key
          chmod 600 ~/.ssh/dev.key
          cat >~/.ssh/config <<_EOF_
          Host dev
            HostName ${{ env.DEV_SSH_HOST }}
            User ${{ env.DEV_SSH_USER }}
            Port ${{ env.DEV_SSH_PORT }}
            IdentityFile ~/.ssh/dev.key
            StrictHostKeyChecking no
          _EOF_
      - name: Pull docker image
        env:
          DOCKER_IMAGE_FULL_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/devops21-metodik2-${{ env.BRANCH }}:latest
        run: |
          ssh dev "cd ~/devops21-metodik2/${{ env.BRANCH }} ; [ -s docker-compose.yml ] && docker compose pull && docker compose up --detach"
